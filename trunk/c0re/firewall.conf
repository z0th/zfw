#
# $Header: /etc/RCS/firewall.conf,v 1.24 2009/04/17 14:52:03 root Exp $
#
#!/bin/bash
#
# C0re FIREWALL.CONF - firewall for multi-homed system
#

## IPTABLES INSTALL ##
# ... where is it located
IPT=`which iptables`

## INTERFACES ##
# ... facing the internet
INET_IFACE=""
INET_IP=$(/sbin/ifconfig $INET_IFACE | grep 'inet addr:' | awk -F '[ :]+' '{print $4}')
# ... facing the office LAN
INT_IFACE="eth0"
INT_IP=$(/sbin/ifconfig $INT_IFACE | grep 'inet addr:' | awk -F '[ :]+' '{print $4}')
# ... localhost 
LO_IFACE="lo"
LO_IP="127.0.0.1/32"

## NETWORKS & PORTS ##
# aci staff controlled
ACI_NETS="205.207.148.0/23 69.17.191.0/26"
ACI_PORTS="22 53 80:81 161:162"
#... USE WITH CARE - any network entered in TRUST_NETS will allow ALL ports!
TRUST_NETS="69.17.191.4/32 205.207.148.233/32"
#... have to trust DNS servers
DNS_HOSTS="205.207.148.93/32 208.67.222.222/32 208.67.220.220/32 24.153.22.14/32"
#
INT_NETS="192.168.1.0/24 192.168.2.0/24"
INT_PORTS="0:65535"
#
WORLD_NETS="0.0.0.0/0"
WORLD_PORTS="80 443 2222"
#
PROTO_TCPUDP="tcp udp"
# ... list of modules that we need loaded for things to operate.
MODULES="ip_tables iptable_filter iptable_mangle ip_conntrack ip_conntrack_ftp ipt_REJECT ipt_LOG nf_conntrack_ftp nf_conntrack_ipv4 nf_conntrack nfnetlink xt_helper xt_tcpudp xt_state xt_limit x_tables"

## FEATURES ##
# ... blacklist files, process the list if they exist
BLKLST_FILES="/etc/firewall.blacklist /etc/firewall.china /etc/firewall.korea /etc/firewall.russia /etc/firewall.zombie"

##
## THE FIREWALL ##
##
# ... basic stuff below; set default policy, clean out old rules, allow the basics
set_policy() {
	# set default policies. input to drop, and we arent doing forwarding.
    	$IPT -P INPUT DROP
    	$IPT -P OUTPUT ACCEPT
    	$IPT -P FORWARD DROP 
}

clean_tables() {

# assuming the possiblity that modules may not be loaded.
	for module in $MODULES; do 
		/sbin/modprobe $module
	done

	# flush out any old rules before running.
	# only need -X {$chain_name} if you are using custom chains
	#$IPT -X
	#$IPT -t nat -F
	#$IPT -t mangle -F
	$IPT -F
}

local_allow() {
        # allow connections from localhost
        $IPT -A INPUT -i $LO_IFACE -j ACCEPT
        $IPT -A OUTPUT -j ACCEPT
        $IPT -A INPUT -i $LO_IFACE -p ALL -s $LO_IP
        # allow child connections that we generate to come back to us
        $IPT -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
        # allow ICMP to work properly.
        for iface in $INET_IFACE $INT_IFACE; do 
                $IPT -A INPUT -i $iface -p icmp -s 0.0.0.0/0 -j ACCEPT
        done
}

# ... here is where we start doing real work.
network_allow() {
        # ... allow our DNS servers to talk to us, have to trust them
        for ip in $DNS_HOSTS; do 
                 $IPT -A INPUT -s $ip -j ACCEPT
        done

        # ... allows on the INET_IFACE side
	for net in $ACI_NETS; do 
		for port in $ACI_PORTS; do 
        		$IPT -A INPUT -i $INT_IFACE -p tcp -s $net --dport $port -j ACCEPT
        		$IPT -A INPUT -i $INT_IFACE -p udp -s $net --dport $port -j ACCEPT
        	done
        done 

        for net in $TRUST_NETS; do
                $IPT -A INPUT -s $net -j ACCEPT
        done

        #... allows on the INT_NETS side
        for proto in $PROTO_TCPUDP; do 
                for net in $INT_NETS; do 
                        for port in $INT_PORTS; do
                                $IPT -A INPUT -i $INT_IFACE -p $proto -s $net -j ACCEPT
                        done
                done
        done
         
        #... allows for the world
        for proto in $PROTO_TCPUDP; do 
                for net in $WORLD_NETS; do 
                        for port in $WORLD_PORTS; do
                                $IPT -A INPUT -p $proto -s $net --dport $port -j ACCEPT
                        done
                done
        done

        # this keeps ftp working on both interfaces, ip_conntrack_ftp module req'd
        #$IPT -A INPUT -i $INET_IFACE -p tcp -s 0.0.0.0/0 --dport 20:21 -j ACCEPT
        #$IPT -A INPUT -i $INET_IFACE -m helper --helper ftp -j ACCEPT
        #$IPT -A INPUT -i $INT_IFACE -p tcp -s 0.0.0.0/0 --dport 20:21 -j ACCEPT 
        #$IPT -A INPUT -i $INT_IFACE -m helper --helper ftp -j ACCEPT
	
	# for some torrent trackers
	$IPT -I INPUT -p tcp --tcp-flags SYN,RST,ACK SYN --dport 6881:6999 -j ACCEPT
	$IPT -I INPUT -p tcp --tcp-flags SYN,RST,ACK SYN --dport 10001:11001 -j ACCEPT
	$IPT -I INPUT -p udp --dport 6881:6999 -m state --state NEW -j ACCEPT
	$IPT -I INPUT -p udp --dport 10001:11001 -m state --state NEW -j ACCEPT

	# defeat sandvine RST packets
	$IPT -A INPUT -p tcp --dport 10001:11001 --tcp-flags RST RST -j DROP
	$IPT -A INPUT -p tcp --dport 22 --tcp-flags RST RST -j DROP
	$IPT -A INPUT -p tcp --dport 2222 --tcp-flags RST RST -j DROP
}

network_deny() {
        #... process any external blacklist files. 
        # format: lines containing # are skipped, one ip/net per line.
        # for single ips, leave the /32 off, for nets use CIDR format.
        # usage: add the ip or net to the blacklist file and reload.
        for file in $BLKLST_FILES; do
                if [ -e $file ]; then 
                        for net in `cat $file | grep -v "#" | egrep "/[0-9]{1}[0-9]{0,1}"`; do
                                $IPT -A INPUT -s $net -j DROP
                        done

                        for ip in `cat $file | grep -v "#" | grep -v \/`; do
                                $IPT -A INPUT -s $ip/32 -j DROP
                        done
                fi
        done
}

firewall_logger() {
        $IPT -A INPUT -p tcp -j LOG --log-level info --log-prefix 'ipt_tcp_drop: ' --log-ip-options --log-tcp-options
        $IPT -A INPUT -p udp -j LOG --log-level info --log-prefix 'ipt_udp_drop: '
}

## ACTIVATION ##
# ... call our functions in order we want 
set_policy
clean_tables
local_allow
network_deny
network_allow
#firewall_logger
